buildscript {
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.3.4.RELEASE")
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.0.1622"
    }
}

plugins {
    id 'application'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'org.springframework.boot' version '2.3.4.RELEASE'
    id 'org.owasp.dependencycheck' version '6.0.2'
    id 'se.patrikerdes.use-latest-versions' version '0.2.10'
    id 'com.github.ben-manes.versions' version '0.21.0'
    id 'org.sonarqube' version '2.7.1'
    id 'jacoco'
    id "com.github.kt3k.coveralls" version "2.8.2"
    id 'net.ltgt.apt' version '0.21'
    id 'com.github.spacialcircumstances.gradle-cucumber-reporting' version '0.1.23'
    id "info.solidsoft.pitest" version '1.4.0'
    id 'uk.gov.hmcts.java' version '0.12.0'
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "org.sonarqube"
apply plugin: 'jacoco'
apply plugin: "com.github.kt3k.coveralls"
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'se.patrikerdes.use-latest-versions'

mainClassName = 'uk.gov.hmcts.ccd.UserProfileApplication'

dependencyCheck {
    suppressionFile = 'dependency-check-suppressions.xml'
}

 // tag::repositories[]
repositories {
    mavenLocal()
    jcenter()
    maven {
        url  "https://jitpack.io"
    }
}
// end::repositories[]

group 'uk.gov.hmcts.ccd'
version '1.2.0-SNAPSHOT'

// tag::jar[]
jar {
    baseName = 'user-profile'
    manifest {

        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
}

bootJar {
    archiveName = 'user-profile.jar'
}

configurations {
    providedRuntime
    annotationProcessor
    aatCompile.extendsFrom(testCompile)
    aatRuntime.extendsFrom(testRuntime)
    cucumberRuntime.extendsFrom(functionalRuntime)
}
// end::jar[]

// tag::dependencies[]
sourceCompatibility = 11
targetCompatibility = 11

ext {
    reformLogging= '5.1.1-BETA'
    springCloudVersion = 'Greenwich.RELEASE'
    limits = [
            'instruction': 86,
            'branch'     : 88,
            'line'       : 88,
            'complexity' : 88,
            'method'     : 88,
            'class'      : 88
    ]
}

ext['junit-jupiter.version'] = '5.5.2'
ext['junit-vintage.version'] = '5.5.2'

dependencies {
    compile('org.projectlombok:lombok:1.18.6')
    annotationProcessor 'org.projectlombok:lombok:1.18.6'
    compile group: 'uk.gov.hmcts.reform', name: 'logging', version: reformLogging
    compile group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: reformLogging
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc') {
        exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'
    }
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    compile("org.springframework.boot:spring-boot-starter-actuator")
    implementation group: 'io.springfox', name: 'springfox-boot-starter', version: '3.0.0'
    compile "org.flywaydb:flyway-core:6.5.7"
    compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-jaxb-annotations', version: '2.1.4'
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.26'
    compile group: 'com.zaxxer', name: 'HikariCP', version: '4.0.2'
    runtime group: 'org.postgresql', name: 'postgresql', version: '42.2.16'
    compile group: 'javax.inject', name: 'javax.inject', version: '1'
    compile (group: 'uk.gov.hmcts.reform.auth', name: 'auth-checker-lib', version: '2.1.3') {
        // TODO remove when auth-checker-lib upgrades its dependency to spring boot 2.0.x
        exclude group: 'uk.gov.hmcts.reform', module: 'java-logging-spring'
    }
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    compile 'net.jcip:jcip-annotations:1.0'


    // Force to use the latest org.springframework.security
    compile group: 'org.springframework.security', name: 'spring-security-core', version: '5.3.8.RELEASE'
    compile group: 'org.springframework.security', name: 'spring-security-config', version: '5.3.8.RELEASE'
    compile group: 'org.springframework.security', name: 'spring-security-web', version: '5.3.8.RELEASE'
    compile group: 'org.springframework.security', name: 'spring-security-crypto', version: '5.3.8.RELEASE'


    compile 'uk.gov.hmcts.reform:properties-volume-spring-boot-starter:0.0.4'

    compile "com.fasterxml.jackson.core:jackson-databind:2.11.0.rc1"
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.11.0.rc1'

    aatCompile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '2.0.0'
    testCompile "org.junit.jupiter:junit-jupiter-api"
    testRuntime "org.junit.jupiter:junit-jupiter-engine"
    testRuntime "org.junit.vintage:junit-vintage-engine"
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testCompile group: 'com.opentable.components', name: 'otj-pg-embedded', version: '0.13.1'
    testCompile group: 'com.github.tomakehurst', name: 'wiremock-standalone', version: '2.21.0'
    testCompile group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: '2.1.0.RELEASE'
    testCompile group: 'com.github.hmcts', name: 'befta-fw', version: '6.14.2'

}
// end::dependencies[]

dependencyManagement {
    dependencies {
        // CVE-2019-0232 - Java and Command Line injections in Windows
        dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.43') {
            entry 'tomcat-embed-core'
            entry 'tomcat-embed-el'
            entry 'tomcat-embed-websocket'
        }
        // CVE-2019-10086
        dependencySet(group: 'commons-beanutils', version: '1.9.4') {
            entry 'commons-beanutils'
        }

        // Remove once BEFTA rest-assured is updated
        dependencySet(group: 'io.rest-assured', version: '4.3.0') {
            entry 'json-path'
            entry 'xml-path'
        }
        dependencySet(group: 'org.codehaus.groovy', version: '3.0.2') {
            entry 'groovy'
            entry 'groovy-xml'
            entry 'groovy-json'
        }
    }
}

pitest {

    targetClasses = ['uk.gov.hmcts.ccd.*']

    targetTests = ['uk.gov.hmcts.ccd.auth.*',
                   'uk.gov.hmcts.ccd.domain.model.*',
                   'uk.gov.hmcts.ccd.domain.service.*'
    ]

    excludedClasses = ['uk.gov.hmcts.ccd.UserProfileApplication']

    enableDefaultIncrementalAnalysis = true
    historyInputLocation = ['build/reports/pitest/fastermutationtesting']
    historyOutputLocation = ['build/reports/pitest/fastermutationtestingoutput']
    threads = 15
    testSourceSets = [sourceSets.test]
    mainSourceSets = [sourceSets.main]
    fileExtensionsToFilter.addAll('xml','json')
    outputFormats = ['XML', 'HTML','CSV']
    mutationThreshold = 9
    coverageThreshold = 0
    maxMutationsPerClass = 15
    jvmArgs = ['-Xms1G','-Xmx3G']
    timestampedReports = false
    failWhenNoMutations = false
    detectInlinedCode = true

}

compileJava {
    options.annotationProcessorPath = configurations.annotationProcessor
}

compileTestJava {
    options.annotationProcessorPath = configurations.annotationProcessor
}
// adopted from
// https://github.com/springfox/springfox/blob/fb780ee1f14627b239fba95730a69900b9b2313a/gradle/coverage.gradle
jacocoTestReport {
    reports {
        // XML required by coveralls and for the below coverage checks
        // and html are generated by default
        xml.enabled true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['uk/gov/hmcts/ccd/endpoint/exception/**',
                              'uk/gov/hmcts/ccd/repository/**'])
        }))
    }

    doLast {
        def report = file("${jacoco.reportsDir}/test/jacocoTestReport.xml")
        logger.lifecycle("Checking coverage results: ${report}")

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def percentage = {
            def covered = it.'@covered' as Double
            def missed = it.'@missed' as Double
            ((covered / (covered + missed)) * 100).round(2)
        }

        def counters = results.counter
        def metrics = [:]
        metrics << [
                'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
                'branch'     : percentage(counters.find { it.'@type'.equals('BRANCH') }),
                'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
                'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
                'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
                'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
        ]


        def failures = []
        metrics.each {
            def limit = limits[it.key]
            if (it.value < limit) {
                failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
            }
        }

        if (failures) {
            logger.quiet("------------------ Code Coverage Failed -----------------------")
            failures.each {
                logger.quiet(it)
            }
            logger.quiet("---------------------------------------------------------------")
            throw new GradleException("Code coverage failed")
        } else{
            logger.quiet("Passed Code Coverage Checks")
        }
    }
}

test {
    environment("AZURE_APPLICATIONINSIGHTS_INSTRUMENTATIONKEY", "some-key")

    generateCucumberReports.enabled = false

    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        html.enabled = true
    }
}


sourceSets {
    aat {
        java {
            srcDir('src/aat/java')
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
        resources {
            srcDir('src/aat/resources')
        }
    }
}

task smoke() {
  description = 'Executes smoke tests against an the CCD User Profile API instance just deployed'
  dependsOn aatClasses

  new File("$buildDir/test-results/test").mkdirs()
  copy{
    from "src/aat/resources/DummyTest.xml"
    into "$buildDir/test-results/test"
  }

  doLast {
    generateCucumberReports.enabled = true
    javaexec {
      main = "uk.gov.hmcts.ccd.userprofile.befta.UserProfileBeftaMain"
      classpath += configurations.cucumberRuntime + sourceSets.aat.runtimeClasspath
      args = ['--plugin', "json:${rootDir}/target/cucumber.json", '--tags', '@Smoke', '--glue',
              'uk.gov.hmcts.befta.player', 'src/aat/resources/features']
      jvmArgs = [ '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED' ]
    }
  }

  finalizedBy {
    generateCucumberReports {
      doLast{
        new File("${rootDir}/BEFTA Report for Smoke Tests").mkdirs()
        file("${rootDir}/target/cucumber/cucumber-html-reports").renameTo(file("${rootDir}/BEFTA Report for Smoke Tests"))
      }
    }
  }

  outputs.upToDateWhen { false }
}

task functional() {
  description = 'Executes functional tests against an the CCD User Profile API instance just deployed'

  new File("$buildDir/test-results/test").mkdirs()
  copy{
    from "src/aat/resources/DummyTest.xml"
    into "$buildDir/test-results/test"
  }

  doFirst {
    generateCucumberReports.enabled = true
    javaexec {
      main = "uk.gov.hmcts.ccd.userprofile.befta.UserProfileBeftaMain"
      classpath += configurations.cucumberRuntime + sourceSets.aat.runtimeClasspath + sourceSets.main.output + sourceSets.test.output
      args = ['--plugin', "json:${rootDir}/target/cucumber.json", '--tags', 'not @Ignore', '--glue',
              'uk.gov.hmcts.befta.player', 'src/aat/resources/features']
      jvmArgs = [ '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED' ]
    }
  }

  finalizedBy {
    generateCucumberReports {
      doLast{
        new File("${rootDir}/BEFTA Report for Functional Tests").mkdirs()
        file("${rootDir}/target/cucumber/cucumber-html-reports").renameTo(file("${rootDir}/BEFTA Report for Functional Tests"))
      }
    }
  }


  outputs.upToDateWhen { false }
}

check.dependsOn jacocoTestReport

sonarqube {
    properties {
        property "sonar.projectName", "ccd-user-profile-api"
        property "sonar.projectKey", "ccd-user-profile-api"
        property "sonar.exclusions", "**/PostgreSQLEnumType.java,**/RestExceptionHandler.java"
        // RestExceptionHandler excluded temporarily due to issue with Sonar (ticket raised with Platops: DTSPO-2243)
    }
}

//Needs a token from https://app.codacy.com/app/%OrgOrOwner%/ccd-user-profile-api/settings/coverage
configurations { codacy }
dependencies {
    codacy 'com.github.codacy:codacy-coverage-reporter:5.0.275'
}
task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "report",
            "-l",
            "Java",
            "-r",
            "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    ]
}

cucumberReports {
    outputDir = file("${projectDir}/target/cucumber")
    reports = files("${projectDir}/target/cucumber.json")
}

configurations.all {
    collect { configuration ->
        configuration.exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
    }
    resolutionStrategy {
        eachDependency { details ->
            if (details.requested.group == 'org.apache.logging.log4j' && details.requested.name == 'log4j-api') {
                details.useVersion '2.13.2'
            }
            if (details.requested.group == 'com.google.guava' && details.requested.name == 'guava') {
                details.useVersion '30.0-jre'
            }
            if (details.requested.group == 'org.dom4j' && details.requested.name == 'dom4j') {
                details.useVersion '2.1.3'
            }
            if (details.requested.group == 'org.hibernate' && details.requested.name == 'hibernate-core') {
                details.useVersion '5.4.24.Final'
            }
            if (details.requested.group == 'org.hibernate' && details.requested.name == 'hibernate-envers') {
                details.useVersion '5.4.21.Final'
            }

        }
    }
}
