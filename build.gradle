buildscript {
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.4.RELEASE")
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

plugins {
    id 'application'
    id 'io.spring.dependency-management' version '1.0.6.RELEASE'
    id 'org.springframework.boot' version '2.0.4.RELEASE'
    id 'org.owasp.dependencycheck' version '3.3.1'
    id 'se.patrikerdes.use-latest-versions' version '0.2.3'
    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'org.sonarqube' version '2.6.2'
    id 'jacoco'
    id 'checkstyle'
    id "com.github.spotbugs" version "1.6.3"
    id "com.github.kt3k.coveralls" version "2.8.2"
    id 'net.ltgt.apt' version '0.18'
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "org.sonarqube"
apply plugin: "com.github.spotbugs"
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: "com.github.kt3k.coveralls"
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'se.patrikerdes.use-latest-versions'

apply from: 'liquibase.gradle'

mainClassName = 'uk.gov.hmcts.ccd.UserProfileApplication'

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'false' ? 11 : 0
    suppressionFile = 'dependency-check-suppressions.xml'
    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
}

// tag::repositories[]
repositories {
    mavenLocal()
    jcenter()
    maven {
        url  "https://dl.bintray.com/hmcts/hmcts-maven"
    }
}
// end::repositories[]

group 'uk.gov.hmcts.ccd'
version '1.2.0-SNAPSHOT'

// tag::jar[]
jar {
    baseName = 'user-profile'
    manifest {

        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
}

bootJar {
    archiveName = 'user-profile.jar'
}

configurations {
    providedRuntime
    annotationProcessor
    aatCompile.extendsFrom(testCompile)
    aatRuntime.extendsFrom(testRuntime)
}
// end::jar[]

// tag::dependencies[]
sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    reformLogging= '3.0.2'
    junitJupiterVersion = '5.3.1'
    junitVintageVersion = '5.3.1'
    hibernateVersion = '5.2.12.Final'
    limits = [
            'instruction': 86,
            'branch'     : 88,
            'line'       : 88,
            'complexity' : 88,
            'method'     : 88,
            'class'      : 88
    ]
}

dependencies {
    compile('org.projectlombok:lombok:1.18.2')
    annotationProcessor 'org.projectlombok:lombok:1.18.2'
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging', version: reformLogging
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-appinsights', version: reformLogging
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc') {
        exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'
    }
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.0'
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.0'
    compile group: 'org.liquibase', name: 'liquibase-core', version: '3.6.1'
    compile group: 'com.zaxxer', name: 'HikariCP', version: '3.2.0'
    runtime group: 'org.postgresql', name: 'postgresql', version: '42.2.2'
    compile group: 'javax.inject', name: 'javax.inject', version: '1'
    compile (group: 'uk.gov.hmcts.reform.auth', name: 'auth-checker-lib', version: '2.1.3') {
        // TODO remove when auth-checker-lib upgrades its dependency to spring boot 2.0.x
        exclude group: 'uk.gov.hmcts.reform', module: 'java-logging-spring'
    }
    compile group: 'io.rest-assured', name: 'rest-assured', version: '3.1.0'
    compile 'net.jcip:jcip-annotations:1.0'
    compile 'com.github.spotbugs:spotbugs-annotations:3.1.7'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.6'
    aatCompile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '1.0.1'
    testCompile "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
    testRuntime "org.junit.vintage:junit-vintage-engine:${junitVintageVersion}"
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testCompile group: 'com.opentable.components', name: 'otj-pg-embedded', version: '0.12.1'
    testCompile group: 'com.github.tomakehurst', name: 'wiremock', version: '2.18.0'
    testCompile group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: '2.0.1.RELEASE'
}
// end::dependencies[]

// tag::wrapper[]
wrapper {
    gradleVersion = '4.9'
}
// end::wrapper[]

checkstyle {
    maxWarnings = 0

    toolVersion = '8.3'
    // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
    configDir = new File(rootDir, 'config/checkstyle')
}

checkstyleMain.shouldRunAfter(compileJava)
test.shouldRunAfter(checkstyleTest)

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

compileJava {
    options.annotationProcessorPath = configurations.annotationProcessor
}

compileTestJava {
    options.annotationProcessorPath = configurations.annotationProcessor
}
// adopted from
// https://github.com/springfox/springfox/blob/fb780ee1f14627b239fba95730a69900b9b2313a/gradle/coverage.gradle
jacocoTestReport {
    reports {
        // XML required by coveralls and for the below coverage checks
        // and html are generated by default
        xml.enabled true
    }

    doLast {
        def report = file("${jacoco.reportsDir}/test/jacocoTestReport.xml")
        logger.lifecycle("Checking coverage results: ${report}")

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def percentage = {
            def covered = it.'@covered' as Double
            def missed = it.'@missed' as Double
            ((covered / (covered + missed)) * 100).round(2)
        }

        def counters = results.counter
        def metrics = [:]
        metrics << [
                'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
                'branch'     : percentage(counters.find { it.'@type'.equals('BRANCH') }),
                'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
                'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
                'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
                'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
        ]


        def failures = []
        metrics.each {
            def limit = limits[it.key]
            if (it.value < limit) {
                failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
            }
        }

        if (failures) {
            logger.quiet("------------------ Code Coverage Failed -----------------------")
            failures.each {
                logger.quiet(it)
            }
            logger.quiet("---------------------------------------------------------------")
            throw new GradleException("Code coverage failed")
        } else{
            logger.quiet("Passed Code Coverage Checks")
        }
    }
}

test {
    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "some-key")

    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        html.enabled = true
    }
}


sourceSets {
    aat {
        java {
            srcDir('src/aat/java')
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
        resources {
            srcDir('src/aat/resources')
        }
    }
}
task smoke(type: Test) {
    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "some-key")
    logger.quiet("TODO: Add smoke tests")
//    group = 'Delivery pipeline'
//    description = 'Executes functional tests against an AAT UserProfile instance'
//    setTestClassesDirs(sourceSets.aat.output.classesDirs)
//    setClasspath(sourceSets.aat.runtimeClasspath)
//    include 'uk.gov.hmcts.ccd.userprofile.tests.smoke'
//    useJUnitPlatform()

}

task functional(type: Test) {
    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "some-key")

    group = 'Delivery pipeline'
    description = 'Executes functional tests against the User Profile instance'
    setTestClassesDirs(sourceSets.aat.output.classesDirs)
    setClasspath(sourceSets.aat.runtimeClasspath)
    include "uk/gov/hmcts/ccd/userprofile/tests/functional/**"
    useJUnitPlatform()
}

check.dependsOn jacocoTestReport

sonarqube {
    properties {
        property "sonar.projectName", "ccd-user-profile-api"
        property "sonar.projectKey", "ccd-user-profile-api"
    }
}

spotbugsAat {
    ignoreFailures = true
}

//Needs a token from https://app.codacy.com/app/%OrgOrOwner%/ccd-user-profile-api/settings/coverage
configurations { codacy }
repositories {
    maven { url "https://jitpack.io" }
    maven { url "http://dl.bintray.com/typesafe/maven-releases" }
}
dependencies {
    codacy 'com.github.codacy:codacy-coverage-reporter:-SNAPSHOT'
}
task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "report",
            "-l",
            "Java",
            "-r",
            "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    ]
}
