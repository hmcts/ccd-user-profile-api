#!groovy
import uk.gov.hmcts.contino.GithubAPI
properties(
        [[$class: 'GithubProjectProperty', projectUrlStr: 'https://git.reform.hmcts.net/case-management/user-profile-app'],
         pipelineTriggers([[$class: 'GitHubPushTrigger']])]
)

//@Library("Infrastructure")
@Library("Infrastructure@do-not-fail-build-on-dependencycheck-aggregate")

def type = "java"
def product = "ccd"
def component = "user-profile-api"
def branchesToSync = ['demo', 'ithc', 'perftest', 'develop']

// Variables to switch pipeline logic and wiring per type of build
def definitionStoreDevelopPr = "PR-575" // This doesn't change frequently, but when it does, only change this value.
def userProfileApiDevelopPr  = "PR-335" // This doesn't change frequently, but when it does, only change this value.
def prsToUseAat             = "PR-407" // Set this value to a PR number, or add it as a comma-separated value, if it's to follow CI/CD.

def secrets = [
    'ccd-${env}': [
        secret('ccd-caseworker-autotest-password', 'CCD_CASEWORKER_AUTOTEST_PASSWORD'),

        secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_OAUTH2_CLIENT_SECRET'),
        secret('definition-importer-username', 'DEFINITION_IMPORTER_USERNAME'),
        secret('definition-importer-password', 'DEFINITION_IMPORTER_PASSWORD')
    ],
    's2s-${env}': [
        secret('microservicekey-ccd-data', 'BEFTA_S2S_CLIENT_SECRET'),
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

def vaultOverrides = [
    'preview': 'aat',
    'spreview': 'saat'
]
// Vars needed for AKS functional and smoke tests
// Assume a feature build branched off 'develop', with dependencies develop-to-develop.

// Other env variables needed for BEFTA.
env.CCD_API_GATEWAY_OAUTH2_CLIENT_ID = "ccd_gateway"
env.IDAM_API_URL_BASE = "https://idam-api.aat.platform.hmcts.net"
env.S2S_URL_BASE = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
env.BEFTA_S2S_CLIENT_ID = "ccd_data"
env.CCD_API_GATEWAY_OAUTH2_REDIRECT_URL = "https://www-ccd.aat.platform.hmcts.net/oauth2redirect"
env.CCD_CASEWORKER_AUTOTEST_EMAIL = "auto.test.cnp@gmail.com"
env.BEFTA_RESPONSE_HEADER_CHECK_POLICY="JUST_WARN" // Temporary workaround for platform changes: turn BEFTA header checks to warning mode
env.TEST_DATA_LOAD_SKIP_PERIOD=1

// Prevent Docker hub rate limit errors by ensuring that testcontainers uses images from hmctspublic ACR
env.TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX = "hmctspublic.azurecr.io/imported/"

withPipeline(type, product, component) {
    steps.shell 'Testing echo..'

    onMaster {
        enableSlackNotifications('#ccd-master-builds')
    }
    if (env.BRANCH_NAME.equalsIgnoreCase(userProfileApiDevelopPr)) {
        enableSlackNotifications('#ccd-develop-builds')
    }

    onDemo {
        enableSlackNotifications('#ccd-demo-builds')
    }
    onPR {
        enableSlackNotifications('#ccd-pr-builds')
    }

    // Check if the build should be wired to a preview instance of definition store
    if (!(env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'demo' || env.BRANCH_NAME == 'perftest' || env.BRANCH_NAME == 'ithc' || prsToUseAat.toLowerCase().contains(env.BRANCH_NAME.toLowerCase()))) {
        env.DEFINITION_STORE_URL_BASE = "https://ccd-definition-store-api-${definitionStoreDevelopPr}.preview.platform.hmcts.net".toLowerCase()
    }

    syncBranchesWithMaster(branchesToSync)
    overrideVaultEnvironments(vaultOverrides)
    enableAksStagingDeployment()
    disableLegacyDeploymentOnAAT()
    loadVaultSecrets(secrets)
    disableLegacyDeployment()
    enableHighLevelDataSetup()

    before('functionalTest:preview') {
        stage('Run Gradle Suppression Tasks') {
            sh './gradlew suppressCves'
            sh 'cat dependency-check-suppressions.xml'
            //sh './gradlew cleanSuppressions || true'
            sh 'git status'
        }

        stage('Auto Commit') {
            script {
                def commitMessage = "Suppressing CVE - Actions"
                def branch = 'test-fix-workflow-suppression'

                sh """
                    git config user.name "jenkins"
                    git config user.email "jenkins@example.com"
                    git remote set-url origin https://${GIT_USERNAME}:${GIT_TOKEN}@github.com/hmcts/ccd-user-profile-api.git
                    git checkout ${branch}
                    git add .
                    git diff --cached --quiet || git commit -m "${commitMessage}"
                    git push origin ${branch}
                """
            }
        }
    }

    afterAlways('smoketest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Smoke Tests/**/*'
    }

    afterAlways('smoketest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Smoke Tests/**/*'
    }

    afterAlways('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Functional Tests/**/*'
    }

    afterAlways('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Functional Tests/**/*, **/cucumber-html-reports/**/*'
    }
}
