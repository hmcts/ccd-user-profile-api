#!groovy

properties([
    // H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
    //CCD-3539 (Stop running Nightly builds on weekends). Original schedule was 'H 05 * * *'
    pipelineTriggers([cron('H 08 * * 1-5')])
])

@Library("Infrastructure")

def type = "java"
def product = "ccd"
def component = "user-profile-api"

def secrets = [
    'ccd-${env}': [
        secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_OAUTH2_CLIENT_SECRET'),
        secret('definition-importer-username', 'DEFINITION_IMPORTER_USERNAME'),
        secret('definition-importer-password', 'DEFINITION_IMPORTER_PASSWORD')
    ],
    's2s-${env}': [
        secret('microservicekey-ccd-data', 'BEFTA_S2S_CLIENT_SECRET'),
        secret('microservicekey-ccd-data', 'CCD_DS_SERVICE_SECRET')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

// Prevent Docker hub rate limit errors by ensuring that testcontainers uses images from hmctspublic ACR
env.TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX = "hmctspublic.azurecr.io/imported/"

withNightlyPipeline(type, product, component) {
    loadVaultSecrets(secrets)
    enableFortifyScan()
    enableDbMigration('ccd')
    enableSlackNotifications('#ccd-nightly-builds')
    enableHighLevelDataSetup()

    environment {
        GIT_USER = 'dinesh1patel'
        GIT_EMAIL = 'dinesh1patel@btinternet.com'
        GIT_CREDENTIALS_ID = 'my-git-credentials' // Replace with your Jenkins credential ID
    }

    stage('Suppress CVEs') {
        steps {
            sh './gradlew suppressCves'
        }
    }

    stage('Clean Suppressions') {
        steps {
            sh './gradlew cleanSuppressions'
        }
    }

    stage('Auto-Commit and Push') {
        steps {
            withCredentials([usernamePassword(credentialsId: env.GIT_CREDENTIALS_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                sh '''
                        git config user.name "$GIT_USER"
                        git config user.email "$GIT_EMAIL"

                        git add .

                        git diff-index --quiet HEAD || git commit -m "Suppressing CVE - Actions"

                        git remote set-url origin https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/hmcts/ccd-user-profile-api.git
                        git push origin test-fix-workflow-suppression
                    '''
            }
        }
    }

    /*
    stage('Auto-Commit Suppressions') {
        steps {
            script {
                gitAutoCommit(
                    commitMessage: 'Suppressing CVE - Actions',
                    branch: 'test-fix-workflow-suppression',
                    credentialsId: 'your-git-creds-id',
                    userName: 'jenkins',
                    userEmail: 'jenkins@example.com'
                )
            }
        }
    }
    */

    afterFailure('build') {
        steps {
            sh './gradlew suppressCves'
        }

        steps {
            sh './gradlew cleanSuppressions'
        }

        steps {
            withCredentials([usernamePassword(credentialsId: env.GIT_CREDENTIALS_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                sh '''
                        git config user.name "$GIT_USER"
                        git config user.email "$GIT_EMAIL"

                        git add .

                        git diff-index --quiet HEAD || git commit -m "Suppressing CVE - Actions"

                        git remote set-url origin https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/hmcts/ccd-user-profile-api.git
                        git push origin test-fix-workflow-suppression
                    '''
            }
        }
    }
    afterAlways('fortify-scan') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
    }
}
