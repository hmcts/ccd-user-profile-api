#!groovy

properties([
    // H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
    //CCD-3539 (Stop running Nightly builds on weekends). Original schedule was 'H 05 * * *'
    pipelineTriggers([cron('H 08 * * 1-5')])
])

@Library("Infrastructure")

def type = "java"
def product = "ccd"
def component = "user-profile-api"

def secrets = [
    'ccd-${env}': [
        secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_OAUTH2_CLIENT_SECRET'),
        secret('definition-importer-username', 'DEFINITION_IMPORTER_USERNAME'),
        secret('definition-importer-password', 'DEFINITION_IMPORTER_PASSWORD')
    ],
    's2s-${env}': [
        secret('microservicekey-ccd-data', 'BEFTA_S2S_CLIENT_SECRET'),
        secret('microservicekey-ccd-data', 'CCD_DS_SERVICE_SECRET')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

// Prevent Docker hub rate limit errors by ensuring that testcontainers uses images from hmctspublic ACR
env.TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX = "hmctspublic.azurecr.io/imported/"

withNightlyPipeline(type, product, component) {
    loadVaultSecrets(secrets)
    enableFortifyScan()
    enableDbMigration('ccd')
    enableSlackNotifications('#ccd-nightly-builds')
    enableHighLevelDataSetup()
    afterAlways('fortify-scan') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
    }

    afterAlways('fortify-scan') {

        stage('Suppress and Send Slack Notification') {

            def slackNotificationChannel = '#nightly_cve_suppressions'
            def branch = env.BRANCH_NAME

            sh './gradlew suppressCves'
            sh 'cat dependency-check-suppressions.xml'

            // Store the list of changed files
            def changedFiles = ''

            // Store the changes in the suppression file
            def changes = ''

            script {
                // Stage all modified tracked files
                sh 'git add -u'

                changedFiles = sh(
                    script: 'git diff --cached --name-only',
                    returnStdout: true
                ).trim().split("\n").findAll { it?.trim() } as List

                if (changedFiles.size() == 1 && changedFiles[0] == 'dependency-check-suppressions.xml') {
                    echo "‚úÖ Only suppression file changed. Proceeding..."

                    // Verify it includes CVE-related changes
                    changes = sh(
                        script: "git diff --cached dependency-check-suppressions.xml | grep '+' | grep 'CVE'",
                        returnStdout: true
                    ).trim()

                    if (changes) {
                        echo "‚úÖ CVE-related changes found in suppression file."
                    } else {
                        echo "‚ö†Ô∏è No CVE-related changes detected."
                    }

                } else {
                    echo "‚úÖ Suppression file not changed ‚Äî marking step as successfull"
                }
            }

            if (changes) {

                // Clean and format CVE lines
                def simplifiedChanges = changes
                    .readLines()
                    .collect { it.replaceFirst(/\+/, '').trim() }                // Remove leading '+'
                    .collect { it.replaceAll(/<\/?[^>]+>/, '') }                 // Strip XML/HTML tags
                //.collect { it.replace('[Ticket]', '<https://yourtracker.example/TICKET-ID|Ticket>') } // Optional link
                    .join('\n')

                def message = """
                                üì¶ *CVE Suppression File Updated*

                                *Detected CVE changes (Please create Jira backlog ticket):*

                                ${simplifiedChanges}

                                *Build Info:*
                                ‚Ä¢ *Job*: ${env.JOB_NAME}
                                ‚Ä¢ *Build*: #${env.BUILD_NUMBER}
                                ‚Ä¢ *URL*: ${env.BUILD_URL}
                               """.stripIndent().trim()

                slackSend(
                    channel: slackNotificationChannel,
                    color: '#439FE0',
                    message: message
                )

                echo "Staged files: ${changedFiles}"
                echo "Changes: ${changes}"

                echo "Commiting changes into branch ${branch}"
                sh 'git commit -m "Suppressing CVE - Actions"'
                echo "Pushing changes"

                def credentialsId = env.GIT_CREDENTIALS_ID

                withCredentials([
                    gitUsernamePassword(credentialsId: credentialsId, gitToolName: 'Default')
                ]) {
                    sh """
                        git push origin HEAD:${branch}
                    """
                }
            } else {
                echo "‚úÖ Suppression file not changed ‚Äî skipping Slack notification"
            }
        }
    }
}
